// <auto-generated />
using System;
using System.Collections.Generic;
using Ermes.EntityFrameworkCore;
using Ermes.Operations;
using Ermes.Reports;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

namespace Ermes.Migrations
{
    [DbContext(typeof(ErmesDbContext))]
    [Migration("20220621143835_Gamification_Actions_Added")]
    partial class Gamification_Actions_Added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Ermes.Activities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("HazardString")
                        .HasColumnName("Hazard")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("activities");
                });

            modelBuilder.Entity("Ermes.Activities.ActivityTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CoreId")
                        .HasColumnType("integer");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CoreId");

                    b.HasIndex("Language", "CoreId")
                        .IsUnique();

                    b.HasIndex("Language", "Name")
                        .IsUnique();

                    b.ToTable("activity_translations");
                });

            modelBuilder.Entity("Ermes.Answers.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("IsTheRightAnswer")
                        .HasColumnType("boolean");

                    b.Property<string>("QuizCode")
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("QuizCode");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("Ermes.Answers.AnswerTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CoreId")
                        .HasColumnType("integer");

                    b.Property<string>("Language")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("CoreId", "Language")
                        .IsUnique();

                    b.ToTable("answer_translations");
                });

            modelBuilder.Entity("Ermes.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FieldTypeString")
                        .HasColumnName("FieldType")
                        .HasColumnType("text");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GroupIcon")
                        .HasColumnType("text");

                    b.Property<string>("GroupKey")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("HazardString")
                        .IsRequired()
                        .HasColumnName("Hazard")
                        .HasColumnType("text");

                    b.Property<string>("MaxValue")
                        .HasColumnType("text");

                    b.Property<string>("MinValue")
                        .HasColumnType("text");

                    b.Property<string>("SubGroupKey")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TargetKeyString")
                        .IsRequired()
                        .HasColumnName("TargetKey")
                        .HasColumnType("text");

                    b.Property<string>("TypeString")
                        .IsRequired()
                        .HasColumnName("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Ermes.Categories.CategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CoreId")
                        .HasColumnType("integer");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Language")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SubGroup")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Target")
                        .HasColumnType("text");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("text");

                    b.Property<string[]>("Values")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("CoreId");

                    b.HasIndex("Group", "SubGroup", "Name", "Language")
                        .IsUnique();

                    b.ToTable("category_translations");
                });

            modelBuilder.Entity("Ermes.Communications.Communication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Geometry>("AreaOfInterest")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<NpgsqlRange<DateTime>>("Duration")
                        .HasColumnType("tsrange");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("communications");
                });

            modelBuilder.Entity("Ermes.CompetenceAreas.CompetenceArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Geometry>("AreaOfInterest")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("CompetenceAreaTypeString")
                        .IsRequired()
                        .HasColumnName("CompetenceAreaType")
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("Uuid")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("competence_areas");
                });

            modelBuilder.Entity("Ermes.EntityHistory.SplitEntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("smallint");

                    b.Property<long>("EntityChangeSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasColumnType("character varying(48)")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeName")
                        .HasColumnType("character varying(96)")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityTypeName");

                    b.ToTable("entitychanges");
                });

            modelBuilder.Entity("Ermes.EntityHistory.SplitEntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("ClientName")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtensionData")
                        .HasColumnType("text");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("integer");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("entitychangesets");
                });

            modelBuilder.Entity("Ermes.EntityHistory.SplitEntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("EntityChangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewValue")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasColumnType("character varying(96)")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasColumnType("character varying(192)")
                        .HasMaxLength(192);

                    b.Property<int?>("SplitIndex")
                        .HasColumnType("integer");

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("entitypropertychanges");
                });

            modelBuilder.Entity("Ermes.Gamification.GamificationAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CompetenceString")
                        .HasColumnName("Competence")
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("gamification_actions");
                });

            modelBuilder.Entity("Ermes.Gamification.GamificationActionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CoreId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("CoreId");

                    b.HasIndex("Language", "CoreId")
                        .IsUnique();

                    b.ToTable("gamification_action_translations");
                });

            modelBuilder.Entity("Ermes.Gamification.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FollowingLevelId")
                        .HasColumnType("integer");

                    b.Property<int>("LowerBound")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PreviousLevelId")
                        .HasColumnType("integer");

                    b.Property<int>("UpperBound")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FollowingLevelId");

                    b.HasIndex("PreviousLevelId");

                    b.ToTable("gamification_levels");
                });

            modelBuilder.Entity("Ermes.Layers.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("CanBeVisualized")
                        .HasColumnType("boolean");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("FormatString")
                        .HasColumnName("Format")
                        .HasColumnType("text");

                    b.Property<string>("FrequencyString")
                        .HasColumnName("Frequency")
                        .HasColumnType("text");

                    b.Property<string>("GroupKey")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PartnerName")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SubGroupKey")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TypeString")
                        .HasColumnName("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DataTypeId")
                        .IsUnique();

                    b.ToTable("layers");
                });

            modelBuilder.Entity("Ermes.Layers.LayerTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CoreId")
                        .HasColumnType("integer");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Language")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SubGroup")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CoreId", "Language")
                        .IsUnique();

                    b.ToTable("layer_translations");
                });

            modelBuilder.Entity("Ermes.MapRequests.MapRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Geometry>("AreaOfInterest")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<List<int>>("DataTypeIds")
                        .HasColumnType("integer[]");

                    b.Property<NpgsqlRange<DateTime>>("Duration")
                        .HasColumnType("tsrange");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<string>("HazardString")
                        .HasColumnName("Hazard")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LayerString")
                        .HasColumnName("Layer")
                        .HasColumnType("text");

                    b.Property<int>("Resolution")
                        .HasColumnType("integer");

                    b.Property<string>("StatusString")
                        .HasColumnName("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatorUserId");

                    b.ToTable("map_requests");
                });

            modelBuilder.Entity("Ermes.Missions.Mission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Geometry>("AreaOfInterest")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<long?>("CoordinatorPersonId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CoordinatorTeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentStatusString")
                        .IsRequired()
                        .HasColumnName("CurrentStatus")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<NpgsqlRange<DateTime>>("Duration")
                        .HasColumnType("tsrange");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorPersonId");

                    b.HasIndex("CoordinatorTeamId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("missions");
                });

            modelBuilder.Entity("Ermes.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChannelString")
                        .HasColumnName("Channel")
                        .HasColumnType("text");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityString")
                        .HasColumnName("Entity")
                        .HasColumnType("text");

                    b.Property<string>("FailureMessage")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Message")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<string>("StatusString")
                        .HasColumnName("Status")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("Ermes.Operations.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("OperationLegacyId")
                        .HasColumnType("integer");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<int>("PersonLegacyId")
                        .HasColumnType("integer");

                    b.Property<string>("Request")
                        .HasColumnType("jsonb");

                    b.Property<VolterResponse>("Response")
                        .HasColumnType("jsonb");

                    b.Property<string>("TypeString")
                        .HasColumnName("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("volter_operations");
                });

            modelBuilder.Entity("Ermes.Organizations.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<bool>("MembersHaveTaxCode")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("WebSite")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("Ermes.Organizations.OrganizationCompetenceArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompetenceAreaId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompetenceAreaId");

                    b.HasIndex("OrganizationId", "CompetenceAreaId")
                        .IsUnique();

                    b.ToTable("organization_competence_areas");
                });

            modelBuilder.Entity("Ermes.Permissions.ErmesPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("Name", "RoleId")
                        .IsUnique();

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("Ermes.Persons.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CurrentOperationLegacyId")
                        .HasColumnType("integer");

                    b.Property<Guid>("FusionAuthUserGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNewUser")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("LegacyId")
                        .HasColumnType("integer");

                    b.Property<int?>("LevelId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<string>("RegistrationToken")
                        .HasColumnType("text");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TeamId");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("Ermes.Persons.PersonAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CurrentActivityId")
                        .HasColumnType("integer");

                    b.Property<string>("CurrentExtensionData")
                        .HasColumnType("jsonb");

                    b.Property<string>("CurrentStatusString")
                        .IsRequired()
                        .HasColumnName("CurrentStatus")
                        .HasColumnType("text");

                    b.Property<string>("DeviceId")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DeviceName")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrentActivityId");

                    b.HasIndex("PersonId");

                    b.ToTable("person_actions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PersonAction");
                });

            modelBuilder.Entity("Ermes.Persons.PersonQuiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("QuizCode")
                        .IsRequired()
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("QuizCode");

                    b.HasIndex("PersonId", "QuizCode")
                        .IsUnique();

                    b.ToTable("person_quizzes");
                });

            modelBuilder.Entity("Ermes.Persons.PersonRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("PersonId", "RoleId")
                        .IsUnique();

                    b.ToTable("person_roles");
                });

            modelBuilder.Entity("Ermes.Persons.PersonTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("TipCode")
                        .IsRequired()
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("TipCode");

                    b.HasIndex("PersonId", "TipCode")
                        .IsUnique();

                    b.ToTable("person_tips");
                });

            modelBuilder.Entity("Ermes.Preferences.Preference", b =>
                {
                    b.Property<long>("PreferenceOwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceString")
                        .HasColumnName("Source")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.HasKey("PreferenceOwnerId", "SourceString");

                    b.HasIndex("PreferenceOwnerId");

                    b.ToTable("preferences");
                });

            modelBuilder.Entity("Ermes.Quizzes.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CrisisPhaseKeyString")
                        .IsRequired()
                        .HasColumnName("CrisisPhase")
                        .HasColumnType("text");

                    b.Property<string>("DifficultyKeyString")
                        .IsRequired()
                        .HasColumnName("Difficulty")
                        .HasColumnType("text");

                    b.Property<string>("EventContextKeyString")
                        .IsRequired()
                        .HasColumnName("EventContext")
                        .HasColumnType("text");

                    b.Property<string>("HazardString")
                        .IsRequired()
                        .HasColumnName("Hazard")
                        .HasColumnType("text");

                    b.Property<string>("TipCode")
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("TipCode");

                    b.ToTable("quizzes");
                });

            modelBuilder.Entity("Ermes.Quizzes.QuizTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CoreId")
                        .HasColumnType("integer");

                    b.Property<string>("CrisisPhase")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EventContext")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Language")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("CoreId", "Language")
                        .IsUnique();

                    b.ToTable("quiz_translations");
                });

            modelBuilder.Entity("Ermes.ReportRequests.ReportRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Geometry>("AreaOfInterest")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<NpgsqlRange<DateTime>>("Duration")
                        .HasColumnType("tsrange");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<List<int>>("SelectedCategories")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("reportrequests");
                });

            modelBuilder.Entity("Ermes.Reports.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<ReportAdultInfo>>("AdultInfo")
                        .HasColumnType("jsonb");

                    b.Property<string>("ContentString")
                        .HasColumnName("ContentType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<List<ReportExtensionData>>("ExtensionData")
                        .HasColumnType("jsonb");

                    b.Property<string>("HazardString")
                        .HasColumnName("Hazard")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<List<string>>("MediaURIs")
                        .HasColumnType("text[]");

                    b.Property<int?>("RelativeMissionId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceString")
                        .HasColumnName("Source")
                        .HasColumnType("text");

                    b.Property<string>("StatusString")
                        .HasColumnName("Status")
                        .HasColumnType("text");

                    b.Property<List<ReportTag>>("Tags")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("RelativeMissionId");

                    b.ToTable("reports");
                });

            modelBuilder.Entity("Ermes.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("SuperRole")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Ermes.Teams.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("Name", "OrganizationId")
                        .IsUnique();

                    b.ToTable("teams");
                });

            modelBuilder.Entity("Ermes.Tips.Tip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CrisisPhaseKeyString")
                        .IsRequired()
                        .HasColumnName("CrisisPhase")
                        .HasColumnType("text");

                    b.Property<string>("EventContextKeyString")
                        .IsRequired()
                        .HasColumnName("EventContext")
                        .HasColumnType("text");

                    b.Property<string>("HazardString")
                        .IsRequired()
                        .HasColumnName("Hazard")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("tips");
                });

            modelBuilder.Entity("Ermes.Tips.TipTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CoreId")
                        .HasColumnType("integer");

                    b.Property<string>("CrisisPhase")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EventContext")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Language")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("character varying(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CoreId", "Language")
                        .IsUnique();

                    b.ToTable("tip_translations");
                });

            modelBuilder.Entity("Ermes.Persons.PersonActionActivity", b =>
                {
                    b.HasBaseType("Ermes.Persons.PersonAction");

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.HasIndex("ActivityId");

                    b.ToTable("person_actions");

                    b.HasDiscriminator().HasValue("PersonActionActivity");
                });

            modelBuilder.Entity("Ermes.Persons.PersonActionSharingPosition", b =>
                {
                    b.HasBaseType("Ermes.Persons.PersonAction");

                    b.ToTable("person_actions");

                    b.HasDiscriminator().HasValue("PersonActionSharingPosition");
                });

            modelBuilder.Entity("Ermes.Persons.PersonActionStatus", b =>
                {
                    b.HasBaseType("Ermes.Persons.PersonAction");

                    b.Property<string>("StatusString")
                        .HasColumnName("Status")
                        .HasColumnType("text");

                    b.ToTable("person_actions");

                    b.HasDiscriminator().HasValue("PersonActionStatus");
                });

            modelBuilder.Entity("Ermes.Persons.PersonActionTracking", b =>
                {
                    b.HasBaseType("Ermes.Persons.PersonAction");

                    b.Property<string>("ExtensionData")
                        .HasColumnType("jsonb");

                    b.ToTable("person_actions");

                    b.HasDiscriminator().HasValue("PersonActionTracking");
                });

            modelBuilder.Entity("Ermes.Activities.Activity", b =>
                {
                    b.HasOne("Ermes.Activities.Activity", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Ermes.Activities.ActivityTranslation", b =>
                {
                    b.HasOne("Ermes.Activities.Activity", "Core")
                        .WithMany("Translations")
                        .HasForeignKey("CoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Answers.Answer", b =>
                {
                    b.HasOne("Ermes.Quizzes.Quiz", "Quiz")
                        .WithMany("Answers")
                        .HasForeignKey("QuizCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Ermes.Answers.AnswerTranslation", b =>
                {
                    b.HasOne("Ermes.Answers.Answer", "Core")
                        .WithMany("Translations")
                        .HasForeignKey("CoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Categories.CategoryTranslation", b =>
                {
                    b.HasOne("Ermes.Categories.Category", "Core")
                        .WithMany("Translations")
                        .HasForeignKey("CoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Communications.Communication", b =>
                {
                    b.HasOne("Ermes.Persons.Person", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");
                });

            modelBuilder.Entity("Ermes.EntityHistory.SplitEntityChange", b =>
                {
                    b.HasOne("Ermes.EntityHistory.SplitEntityChangeSet", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.EntityHistory.SplitEntityPropertyChange", b =>
                {
                    b.HasOne("Ermes.EntityHistory.SplitEntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Gamification.GamificationActionTranslation", b =>
                {
                    b.HasOne("Ermes.Gamification.GamificationAction", "Core")
                        .WithMany("Translations")
                        .HasForeignKey("CoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Gamification.Level", b =>
                {
                    b.HasOne("Ermes.Gamification.Level", "FollowingLevel")
                        .WithMany()
                        .HasForeignKey("FollowingLevelId");

                    b.HasOne("Ermes.Gamification.Level", "PreviousLevel")
                        .WithMany()
                        .HasForeignKey("PreviousLevelId");
                });

            modelBuilder.Entity("Ermes.Layers.LayerTranslation", b =>
                {
                    b.HasOne("Ermes.Layers.Layer", "Core")
                        .WithMany("Translations")
                        .HasForeignKey("CoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.MapRequests.MapRequest", b =>
                {
                    b.HasOne("Ermes.Persons.Person", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");
                });

            modelBuilder.Entity("Ermes.Missions.Mission", b =>
                {
                    b.HasOne("Ermes.Persons.Person", "CoordinatorPerson")
                        .WithMany()
                        .HasForeignKey("CoordinatorPersonId");

                    b.HasOne("Ermes.Teams.Team", "CoordinatorTeam")
                        .WithMany()
                        .HasForeignKey("CoordinatorTeamId");

                    b.HasOne("Ermes.Persons.Person", "CreatorPerson")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Ermes.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Notifications.Notification", b =>
                {
                    b.HasOne("Ermes.Persons.Person", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("Ermes.Persons.Person", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");
                });

            modelBuilder.Entity("Ermes.Operations.Operation", b =>
                {
                    b.HasOne("Ermes.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Organizations.Organization", b =>
                {
                    b.HasOne("Ermes.Organizations.Organization", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Ermes.Organizations.OrganizationCompetenceArea", b =>
                {
                    b.HasOne("Ermes.CompetenceAreas.CompetenceArea", "CompetenceArea")
                        .WithMany()
                        .HasForeignKey("CompetenceAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ermes.Organizations.Organization", "Organization")
                        .WithMany("CompetenceAreas")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Permissions.ErmesPermission", b =>
                {
                    b.HasOne("Ermes.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Persons.Person", b =>
                {
                    b.HasOne("Ermes.Gamification.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("Ermes.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Ermes.Teams.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Ermes.Persons.PersonAction", b =>
                {
                    b.HasOne("Ermes.Activities.Activity", "CurrentActivity")
                        .WithMany()
                        .HasForeignKey("CurrentActivityId");

                    b.HasOne("Ermes.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Persons.PersonQuiz", b =>
                {
                    b.HasOne("Ermes.Persons.Person", "Person")
                        .WithMany("Quizzes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ermes.Quizzes.Quiz", "Quiz")
                        .WithMany("Solvers")
                        .HasForeignKey("QuizCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Persons.PersonRole", b =>
                {
                    b.HasOne("Ermes.Persons.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ermes.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Persons.PersonTip", b =>
                {
                    b.HasOne("Ermes.Persons.Person", "Person")
                        .WithMany("Tips")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ermes.Tips.Tip", "Tip")
                        .WithMany("Readers")
                        .HasForeignKey("TipCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Preferences.Preference", b =>
                {
                    b.HasOne("Ermes.Persons.Person", "PreferenceOwner")
                        .WithOne()
                        .HasForeignKey("Ermes.Preferences.Preference", "PreferenceOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Quizzes.Quiz", b =>
                {
                    b.HasOne("Ermes.Tips.Tip", "Tip")
                        .WithMany("Quizzes")
                        .HasForeignKey("TipCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Ermes.Quizzes.QuizTranslation", b =>
                {
                    b.HasOne("Ermes.Quizzes.Quiz", "Core")
                        .WithMany("Translations")
                        .HasForeignKey("CoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.ReportRequests.ReportRequest", b =>
                {
                    b.HasOne("Ermes.Persons.Person", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");
                });

            modelBuilder.Entity("Ermes.Reports.Report", b =>
                {
                    b.HasOne("Ermes.Persons.Person", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Ermes.Missions.Mission", "RelativeMission")
                        .WithMany()
                        .HasForeignKey("RelativeMissionId");
                });

            modelBuilder.Entity("Ermes.Teams.Team", b =>
                {
                    b.HasOne("Ermes.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Tips.TipTranslation", b =>
                {
                    b.HasOne("Ermes.Tips.Tip", "Core")
                        .WithMany("Translations")
                        .HasForeignKey("CoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ermes.Persons.PersonActionActivity", b =>
                {
                    b.HasOne("Ermes.Activities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
