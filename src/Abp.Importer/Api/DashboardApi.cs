/*
 * Importer & Mapper API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Abp.Importer.Client;
using Abp.Importer.Model;

namespace Abp.Importer.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Check Layers
        /// </summary>
        /// <remarks>
        /// Check if all the files are actually available,   :param delete_missings: delete all the layers not available :type delete_missings: boolean :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMissings"> (optional, default to false)</param>
        /// <returns>List&lt;GeoserverResourceSchema&gt;</returns>
        List<GeoserverResourceSchema> GetCheckLayersCheckLayersGet(bool? deleteMissings = default(bool?));

        /// <summary>
        /// Get Check Layers
        /// </summary>
        /// <remarks>
        /// Check if all the files are actually available,   :param delete_missings: delete all the layers not available :type delete_missings: boolean :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMissings"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;GeoserverResourceSchema&gt;</returns>
        ApiResponse<List<GeoserverResourceSchema>> GetCheckLayersCheckLayersGetWithHttpInfo(bool? deleteMissings = default(bool?));
        /// <summary>
        /// Get Layers
        /// </summary>
        /// <remarks>
        /// Gets the list of published layers given optional criteria.  :param datatype_ids: list of datatype_id to filter by, defaults to Query(None) :type datatype_ids: Optional[List[str]], optional :param bbox: bounding box string in the form \&quot;bottomleft-x,bottomleft-y,topright-x,topright-y\&quot;, defaults to Query(None) :type bbox: Optional[str], optional :param start: filter resources with start_date &gt;&#x3D; start, start in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type start: Optional[datetime], optional :param end: filter resources with end_date &lt;&#x3D; end, end in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type end: Optional[datetime], optional :type request_codes: Optional[List[str]], optional :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of layers grouped by datatype id :rtype: List[Dict[str,Dict[str,object]]]
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="bbox"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="requestCodes"> (optional)</param>
        /// <param name="includeMapRequests"> (optional, default to true)</param>
        /// <returns>Object</returns>
        Object GetLayersLayersGet(List<string> datatypeIds = default(List<string>), string bbox = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string> requestCodes = default(List<string>), bool? includeMapRequests = default(bool?));

        /// <summary>
        /// Get Layers
        /// </summary>
        /// <remarks>
        /// Gets the list of published layers given optional criteria.  :param datatype_ids: list of datatype_id to filter by, defaults to Query(None) :type datatype_ids: Optional[List[str]], optional :param bbox: bounding box string in the form \&quot;bottomleft-x,bottomleft-y,topright-x,topright-y\&quot;, defaults to Query(None) :type bbox: Optional[str], optional :param start: filter resources with start_date &gt;&#x3D; start, start in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type start: Optional[datetime], optional :param end: filter resources with end_date &lt;&#x3D; end, end in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type end: Optional[datetime], optional :type request_codes: Optional[List[str]], optional :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of layers grouped by datatype id :rtype: List[Dict[str,Dict[str,object]]]
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="bbox"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="requestCodes"> (optional)</param>
        /// <param name="includeMapRequests"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetLayersLayersGetWithHttpInfo(List<string> datatypeIds = default(List<string>), string bbox = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string> requestCodes = default(List<string>), bool? includeMapRequests = default(bool?));
        /// <summary>
        /// Get Resources
        /// </summary>
        /// <remarks>
        /// Gets stored resources following the given optional criteria.  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <param name="includeDeleted"> (optional, default to false)</param>
        /// <returns>List&lt;GeoserverResourceSchema&gt;</returns>
        List<GeoserverResourceSchema> GetResourcesResourcesGet(List<string> datatypeIds = default(List<string>), string resourceId = default(string), bool? includeDeleted = default(bool?));

        /// <summary>
        /// Get Resources
        /// </summary>
        /// <remarks>
        /// Gets stored resources following the given optional criteria.  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <param name="includeDeleted"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;GeoserverResourceSchema&gt;</returns>
        ApiResponse<List<GeoserverResourceSchema>> GetResourcesResourcesGetWithHttpInfo(List<string> datatypeIds = default(List<string>), string resourceId = default(string), bool? includeDeleted = default(bool?));
        /// <summary>
        /// Get Timeseries
        /// </summary>
        /// <remarks>
        /// Retrieves the time series of the requested attribute for layers denoted by the specified datatype_id, at the \&quot;point\&quot; position  :param datatype_id: datatype_id of the layers to retrieve the attribute time series from :type datatype_id: str  :param request_code: request code of the layers to retrieve the attribute time series from :type request_code: str  :param point: point string in the WKT form PONIT(x y) :type point: str  :param start: start date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with start_date &gt;&#x3D; start, defaults to Query(None) :type start: Optional[datetime], optional  :param end: end date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with end_date &lt;&#x3D; end, defaults to Query(None) :type end: Optional[datetime], optional  :param crs: coordinate reference system. For example: &#39;EPSG:4326&#39; :type crs: str  :param attribute: name of the column containing the requested attribute :type attribute: Optional[str]  :param geom_col: name of the db table column containing the geometry :type geom_col: Optional[str]  :param date_start_col: name of the db table column containing the activation start date :type date_start_col: Optional[str]  :param date_end_col: name of the db table column containing the activation end date :type date_end_col: Optional[str]  :param creation_date_col: name of the column to use when choosing between multiple table rows with the same start_date.                           Pick always the row with the most recent creation_date_col :type creation_date_col: Optional[str]  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional  :return: time series of the attribute values at \&quot;point\&quot; location :rtype: json  Example: I have many GeoJSON files that form a time series saved on the PostGIS db, each containing polygons with certain values over a specified area. I want to get the series of the \&quot;temperature\&quot; value of the point 15.18,41.68 from date 2020-02-04 00:00:00 to date 2020-02-11 23:59:59. Supposing that the GeoJSON files have their geometries saved in the \&quot;geometry\&quot; column, their start reference date saved in the \&quot;date_start\&quot; column and their end reference date in the \&quot;date_end\&quot; column, specifying all these parameters returns me a dataframe with all the values of the \&quot;temperature\&quot; variable contained in the GeoJSON files for the requested time period, at the specified point location. The \&quot;creation_date_col\&quot; is used when multiple files span the same time (to be more precise, have the same \&quot;date_start\&quot;), only the most recent is returned.
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeId"></param>
        /// <param name="point"></param>
        /// <param name="crs"></param>
        /// <param name="requestCode"> (optional)</param>
        /// <param name="layerName"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="attribute"> (optional)</param>
        /// <param name="geomCol"> (optional, default to &quot;geometry&quot;)</param>
        /// <param name="dateStartCol"> (optional, default to &quot;date_start&quot;)</param>
        /// <param name="dateEndCol"> (optional, default to &quot;date_end&quot;)</param>
        /// <param name="creationDateCol"> (optional, default to &quot;computation_time&quot;)</param>
        /// <returns>Object</returns>
        Object GetTimeseriesTimeseriesGet(string datatypeId, string point, string crs, string requestCode = default(string), string layerName = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string attribute = default(string), string geomCol = default(string), string dateStartCol = default(string), string dateEndCol = default(string), string creationDateCol = default(string));

        /// <summary>
        /// Get Timeseries
        /// </summary>
        /// <remarks>
        /// Retrieves the time series of the requested attribute for layers denoted by the specified datatype_id, at the \&quot;point\&quot; position  :param datatype_id: datatype_id of the layers to retrieve the attribute time series from :type datatype_id: str  :param request_code: request code of the layers to retrieve the attribute time series from :type request_code: str  :param point: point string in the WKT form PONIT(x y) :type point: str  :param start: start date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with start_date &gt;&#x3D; start, defaults to Query(None) :type start: Optional[datetime], optional  :param end: end date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with end_date &lt;&#x3D; end, defaults to Query(None) :type end: Optional[datetime], optional  :param crs: coordinate reference system. For example: &#39;EPSG:4326&#39; :type crs: str  :param attribute: name of the column containing the requested attribute :type attribute: Optional[str]  :param geom_col: name of the db table column containing the geometry :type geom_col: Optional[str]  :param date_start_col: name of the db table column containing the activation start date :type date_start_col: Optional[str]  :param date_end_col: name of the db table column containing the activation end date :type date_end_col: Optional[str]  :param creation_date_col: name of the column to use when choosing between multiple table rows with the same start_date.                           Pick always the row with the most recent creation_date_col :type creation_date_col: Optional[str]  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional  :return: time series of the attribute values at \&quot;point\&quot; location :rtype: json  Example: I have many GeoJSON files that form a time series saved on the PostGIS db, each containing polygons with certain values over a specified area. I want to get the series of the \&quot;temperature\&quot; value of the point 15.18,41.68 from date 2020-02-04 00:00:00 to date 2020-02-11 23:59:59. Supposing that the GeoJSON files have their geometries saved in the \&quot;geometry\&quot; column, their start reference date saved in the \&quot;date_start\&quot; column and their end reference date in the \&quot;date_end\&quot; column, specifying all these parameters returns me a dataframe with all the values of the \&quot;temperature\&quot; variable contained in the GeoJSON files for the requested time period, at the specified point location. The \&quot;creation_date_col\&quot; is used when multiple files span the same time (to be more precise, have the same \&quot;date_start\&quot;), only the most recent is returned.
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeId"></param>
        /// <param name="point"></param>
        /// <param name="crs"></param>
        /// <param name="requestCode"> (optional)</param>
        /// <param name="layerName"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="attribute"> (optional)</param>
        /// <param name="geomCol"> (optional, default to &quot;geometry&quot;)</param>
        /// <param name="dateStartCol"> (optional, default to &quot;date_start&quot;)</param>
        /// <param name="dateEndCol"> (optional, default to &quot;date_end&quot;)</param>
        /// <param name="creationDateCol"> (optional, default to &quot;computation_time&quot;)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetTimeseriesTimeseriesGetWithHttpInfo(string datatypeId, string point, string crs, string requestCode = default(string), string layerName = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string attribute = default(string), string geomCol = default(string), string dateStartCol = default(string), string dateEndCol = default(string), string creationDateCol = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Check Layers
        /// </summary>
        /// <remarks>
        /// Check if all the files are actually available,   :param delete_missings: delete all the layers not available :type delete_missings: boolean :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMissings"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GeoserverResourceSchema&gt;</returns>
        System.Threading.Tasks.Task<List<GeoserverResourceSchema>> GetCheckLayersCheckLayersGetAsync(bool? deleteMissings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Check Layers
        /// </summary>
        /// <remarks>
        /// Check if all the files are actually available,   :param delete_missings: delete all the layers not available :type delete_missings: boolean :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMissings"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GeoserverResourceSchema&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GeoserverResourceSchema>>> GetCheckLayersCheckLayersGetWithHttpInfoAsync(bool? deleteMissings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Layers
        /// </summary>
        /// <remarks>
        /// Gets the list of published layers given optional criteria.  :param datatype_ids: list of datatype_id to filter by, defaults to Query(None) :type datatype_ids: Optional[List[str]], optional :param bbox: bounding box string in the form \&quot;bottomleft-x,bottomleft-y,topright-x,topright-y\&quot;, defaults to Query(None) :type bbox: Optional[str], optional :param start: filter resources with start_date &gt;&#x3D; start, start in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type start: Optional[datetime], optional :param end: filter resources with end_date &lt;&#x3D; end, end in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type end: Optional[datetime], optional :type request_codes: Optional[List[str]], optional :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of layers grouped by datatype id :rtype: List[Dict[str,Dict[str,object]]]
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="bbox"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="requestCodes"> (optional)</param>
        /// <param name="includeMapRequests"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetLayersLayersGetAsync(List<string> datatypeIds = default(List<string>), string bbox = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string> requestCodes = default(List<string>), bool? includeMapRequests = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Layers
        /// </summary>
        /// <remarks>
        /// Gets the list of published layers given optional criteria.  :param datatype_ids: list of datatype_id to filter by, defaults to Query(None) :type datatype_ids: Optional[List[str]], optional :param bbox: bounding box string in the form \&quot;bottomleft-x,bottomleft-y,topright-x,topright-y\&quot;, defaults to Query(None) :type bbox: Optional[str], optional :param start: filter resources with start_date &gt;&#x3D; start, start in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type start: Optional[datetime], optional :param end: filter resources with end_date &lt;&#x3D; end, end in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type end: Optional[datetime], optional :type request_codes: Optional[List[str]], optional :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of layers grouped by datatype id :rtype: List[Dict[str,Dict[str,object]]]
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="bbox"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="requestCodes"> (optional)</param>
        /// <param name="includeMapRequests"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLayersLayersGetWithHttpInfoAsync(List<string> datatypeIds = default(List<string>), string bbox = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string> requestCodes = default(List<string>), bool? includeMapRequests = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Resources
        /// </summary>
        /// <remarks>
        /// Gets stored resources following the given optional criteria.  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <param name="includeDeleted"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GeoserverResourceSchema&gt;</returns>
        System.Threading.Tasks.Task<List<GeoserverResourceSchema>> GetResourcesResourcesGetAsync(List<string> datatypeIds = default(List<string>), string resourceId = default(string), bool? includeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Resources
        /// </summary>
        /// <remarks>
        /// Gets stored resources following the given optional criteria.  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <param name="includeDeleted"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GeoserverResourceSchema&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GeoserverResourceSchema>>> GetResourcesResourcesGetWithHttpInfoAsync(List<string> datatypeIds = default(List<string>), string resourceId = default(string), bool? includeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Timeseries
        /// </summary>
        /// <remarks>
        /// Retrieves the time series of the requested attribute for layers denoted by the specified datatype_id, at the \&quot;point\&quot; position  :param datatype_id: datatype_id of the layers to retrieve the attribute time series from :type datatype_id: str  :param request_code: request code of the layers to retrieve the attribute time series from :type request_code: str  :param point: point string in the WKT form PONIT(x y) :type point: str  :param start: start date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with start_date &gt;&#x3D; start, defaults to Query(None) :type start: Optional[datetime], optional  :param end: end date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with end_date &lt;&#x3D; end, defaults to Query(None) :type end: Optional[datetime], optional  :param crs: coordinate reference system. For example: &#39;EPSG:4326&#39; :type crs: str  :param attribute: name of the column containing the requested attribute :type attribute: Optional[str]  :param geom_col: name of the db table column containing the geometry :type geom_col: Optional[str]  :param date_start_col: name of the db table column containing the activation start date :type date_start_col: Optional[str]  :param date_end_col: name of the db table column containing the activation end date :type date_end_col: Optional[str]  :param creation_date_col: name of the column to use when choosing between multiple table rows with the same start_date.                           Pick always the row with the most recent creation_date_col :type creation_date_col: Optional[str]  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional  :return: time series of the attribute values at \&quot;point\&quot; location :rtype: json  Example: I have many GeoJSON files that form a time series saved on the PostGIS db, each containing polygons with certain values over a specified area. I want to get the series of the \&quot;temperature\&quot; value of the point 15.18,41.68 from date 2020-02-04 00:00:00 to date 2020-02-11 23:59:59. Supposing that the GeoJSON files have their geometries saved in the \&quot;geometry\&quot; column, their start reference date saved in the \&quot;date_start\&quot; column and their end reference date in the \&quot;date_end\&quot; column, specifying all these parameters returns me a dataframe with all the values of the \&quot;temperature\&quot; variable contained in the GeoJSON files for the requested time period, at the specified point location. The \&quot;creation_date_col\&quot; is used when multiple files span the same time (to be more precise, have the same \&quot;date_start\&quot;), only the most recent is returned.
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeId"></param>
        /// <param name="point"></param>
        /// <param name="crs"></param>
        /// <param name="requestCode"> (optional)</param>
        /// <param name="layerName"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="attribute"> (optional)</param>
        /// <param name="geomCol"> (optional, default to &quot;geometry&quot;)</param>
        /// <param name="dateStartCol"> (optional, default to &quot;date_start&quot;)</param>
        /// <param name="dateEndCol"> (optional, default to &quot;date_end&quot;)</param>
        /// <param name="creationDateCol"> (optional, default to &quot;computation_time&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetTimeseriesTimeseriesGetAsync(string datatypeId, string point, string crs, string requestCode = default(string), string layerName = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string attribute = default(string), string geomCol = default(string), string dateStartCol = default(string), string dateEndCol = default(string), string creationDateCol = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Timeseries
        /// </summary>
        /// <remarks>
        /// Retrieves the time series of the requested attribute for layers denoted by the specified datatype_id, at the \&quot;point\&quot; position  :param datatype_id: datatype_id of the layers to retrieve the attribute time series from :type datatype_id: str  :param request_code: request code of the layers to retrieve the attribute time series from :type request_code: str  :param point: point string in the WKT form PONIT(x y) :type point: str  :param start: start date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with start_date &gt;&#x3D; start, defaults to Query(None) :type start: Optional[datetime], optional  :param end: end date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with end_date &lt;&#x3D; end, defaults to Query(None) :type end: Optional[datetime], optional  :param crs: coordinate reference system. For example: &#39;EPSG:4326&#39; :type crs: str  :param attribute: name of the column containing the requested attribute :type attribute: Optional[str]  :param geom_col: name of the db table column containing the geometry :type geom_col: Optional[str]  :param date_start_col: name of the db table column containing the activation start date :type date_start_col: Optional[str]  :param date_end_col: name of the db table column containing the activation end date :type date_end_col: Optional[str]  :param creation_date_col: name of the column to use when choosing between multiple table rows with the same start_date.                           Pick always the row with the most recent creation_date_col :type creation_date_col: Optional[str]  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional  :return: time series of the attribute values at \&quot;point\&quot; location :rtype: json  Example: I have many GeoJSON files that form a time series saved on the PostGIS db, each containing polygons with certain values over a specified area. I want to get the series of the \&quot;temperature\&quot; value of the point 15.18,41.68 from date 2020-02-04 00:00:00 to date 2020-02-11 23:59:59. Supposing that the GeoJSON files have their geometries saved in the \&quot;geometry\&quot; column, their start reference date saved in the \&quot;date_start\&quot; column and their end reference date in the \&quot;date_end\&quot; column, specifying all these parameters returns me a dataframe with all the values of the \&quot;temperature\&quot; variable contained in the GeoJSON files for the requested time period, at the specified point location. The \&quot;creation_date_col\&quot; is used when multiple files span the same time (to be more precise, have the same \&quot;date_start\&quot;), only the most recent is returned.
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeId"></param>
        /// <param name="point"></param>
        /// <param name="crs"></param>
        /// <param name="requestCode"> (optional)</param>
        /// <param name="layerName"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="attribute"> (optional)</param>
        /// <param name="geomCol"> (optional, default to &quot;geometry&quot;)</param>
        /// <param name="dateStartCol"> (optional, default to &quot;date_start&quot;)</param>
        /// <param name="dateEndCol"> (optional, default to &quot;date_end&quot;)</param>
        /// <param name="creationDateCol"> (optional, default to &quot;computation_time&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetTimeseriesTimeseriesGetWithHttpInfoAsync(string datatypeId, string point, string crs, string requestCode = default(string), string layerName = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string attribute = default(string), string geomCol = default(string), string dateStartCol = default(string), string dateEndCol = default(string), string creationDateCol = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDashboardApi : IDashboardApiSync, IDashboardApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DashboardApi : IDashboardApi
    {
        private Abp.Importer.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DashboardApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DashboardApi(string basePath)
        {
            this.Configuration = Abp.Importer.Client.Configuration.MergeConfigurations(
                Abp.Importer.Client.GlobalConfiguration.Instance,
                new Abp.Importer.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Abp.Importer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Abp.Importer.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Abp.Importer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DashboardApi(Abp.Importer.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Abp.Importer.Client.Configuration.MergeConfigurations(
                Abp.Importer.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Abp.Importer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Abp.Importer.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Abp.Importer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DashboardApi(Abp.Importer.Client.ISynchronousClient client, Abp.Importer.Client.IAsynchronousClient asyncClient, Abp.Importer.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Abp.Importer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Abp.Importer.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Abp.Importer.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Abp.Importer.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Abp.Importer.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Check Layers Check if all the files are actually available,   :param delete_missings: delete all the layers not available :type delete_missings: boolean :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMissings"> (optional, default to false)</param>
        /// <returns>List&lt;GeoserverResourceSchema&gt;</returns>
        public List<GeoserverResourceSchema> GetCheckLayersCheckLayersGet(bool? deleteMissings = default(bool?))
        {
            Abp.Importer.Client.ApiResponse<List<GeoserverResourceSchema>> localVarResponse = GetCheckLayersCheckLayersGetWithHttpInfo(deleteMissings);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Check Layers Check if all the files are actually available,   :param delete_missings: delete all the layers not available :type delete_missings: boolean :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMissings"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;GeoserverResourceSchema&gt;</returns>
        public Abp.Importer.Client.ApiResponse<List<GeoserverResourceSchema>> GetCheckLayersCheckLayersGetWithHttpInfo(bool? deleteMissings = default(bool?))
        {
            Abp.Importer.Client.RequestOptions localVarRequestOptions = new Abp.Importer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Abp.Importer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Abp.Importer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (deleteMissings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "delete_missings", deleteMissings));
            }

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GeoserverResourceSchema>>("/check_layers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCheckLayersCheckLayersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Check Layers Check if all the files are actually available,   :param delete_missings: delete all the layers not available :type delete_missings: boolean :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMissings"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GeoserverResourceSchema&gt;</returns>
        public async System.Threading.Tasks.Task<List<GeoserverResourceSchema>> GetCheckLayersCheckLayersGetAsync(bool? deleteMissings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Abp.Importer.Client.ApiResponse<List<GeoserverResourceSchema>> localVarResponse = await GetCheckLayersCheckLayersGetWithHttpInfoAsync(deleteMissings, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Check Layers Check if all the files are actually available,   :param delete_missings: delete all the layers not available :type delete_missings: boolean :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMissings"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GeoserverResourceSchema&gt;)</returns>
        public async System.Threading.Tasks.Task<Abp.Importer.Client.ApiResponse<List<GeoserverResourceSchema>>> GetCheckLayersCheckLayersGetWithHttpInfoAsync(bool? deleteMissings = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Abp.Importer.Client.RequestOptions localVarRequestOptions = new Abp.Importer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Abp.Importer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Abp.Importer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (deleteMissings != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "delete_missings", deleteMissings));
            }

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GeoserverResourceSchema>>("/check_layers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCheckLayersCheckLayersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Layers Gets the list of published layers given optional criteria.  :param datatype_ids: list of datatype_id to filter by, defaults to Query(None) :type datatype_ids: Optional[List[str]], optional :param bbox: bounding box string in the form \&quot;bottomleft-x,bottomleft-y,topright-x,topright-y\&quot;, defaults to Query(None) :type bbox: Optional[str], optional :param start: filter resources with start_date &gt;&#x3D; start, start in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type start: Optional[datetime], optional :param end: filter resources with end_date &lt;&#x3D; end, end in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type end: Optional[datetime], optional :type request_codes: Optional[List[str]], optional :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of layers grouped by datatype id :rtype: List[Dict[str,Dict[str,object]]]
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="bbox"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="requestCodes"> (optional)</param>
        /// <param name="includeMapRequests"> (optional, default to true)</param>
        /// <returns>Object</returns>
        public Object GetLayersLayersGet(List<string> datatypeIds = default(List<string>), string bbox = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string> requestCodes = default(List<string>), bool? includeMapRequests = default(bool?))
        {
            Abp.Importer.Client.ApiResponse<Object> localVarResponse = GetLayersLayersGetWithHttpInfo(datatypeIds, bbox, start, end, requestCodes, includeMapRequests);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Layers Gets the list of published layers given optional criteria.  :param datatype_ids: list of datatype_id to filter by, defaults to Query(None) :type datatype_ids: Optional[List[str]], optional :param bbox: bounding box string in the form \&quot;bottomleft-x,bottomleft-y,topright-x,topright-y\&quot;, defaults to Query(None) :type bbox: Optional[str], optional :param start: filter resources with start_date &gt;&#x3D; start, start in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type start: Optional[datetime], optional :param end: filter resources with end_date &lt;&#x3D; end, end in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type end: Optional[datetime], optional :type request_codes: Optional[List[str]], optional :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of layers grouped by datatype id :rtype: List[Dict[str,Dict[str,object]]]
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="bbox"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="requestCodes"> (optional)</param>
        /// <param name="includeMapRequests"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object</returns>
        public Abp.Importer.Client.ApiResponse<Object> GetLayersLayersGetWithHttpInfo(List<string> datatypeIds = default(List<string>), string bbox = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string> requestCodes = default(List<string>), bool? includeMapRequests = default(bool?))
        {
            Abp.Importer.Client.RequestOptions localVarRequestOptions = new Abp.Importer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Abp.Importer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Abp.Importer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (datatypeIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("multi", "datatype_ids", datatypeIds));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (requestCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("multi", "request_codes", requestCodes));
            }
            if (includeMapRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "include_map_requests", includeMapRequests));
            }

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/layers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLayersLayersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Layers Gets the list of published layers given optional criteria.  :param datatype_ids: list of datatype_id to filter by, defaults to Query(None) :type datatype_ids: Optional[List[str]], optional :param bbox: bounding box string in the form \&quot;bottomleft-x,bottomleft-y,topright-x,topright-y\&quot;, defaults to Query(None) :type bbox: Optional[str], optional :param start: filter resources with start_date &gt;&#x3D; start, start in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type start: Optional[datetime], optional :param end: filter resources with end_date &lt;&#x3D; end, end in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type end: Optional[datetime], optional :type request_codes: Optional[List[str]], optional :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of layers grouped by datatype id :rtype: List[Dict[str,Dict[str,object]]]
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="bbox"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="requestCodes"> (optional)</param>
        /// <param name="includeMapRequests"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetLayersLayersGetAsync(List<string> datatypeIds = default(List<string>), string bbox = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string> requestCodes = default(List<string>), bool? includeMapRequests = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Abp.Importer.Client.ApiResponse<Object> localVarResponse = await GetLayersLayersGetWithHttpInfoAsync(datatypeIds, bbox, start, end, requestCodes, includeMapRequests, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Layers Gets the list of published layers given optional criteria.  :param datatype_ids: list of datatype_id to filter by, defaults to Query(None) :type datatype_ids: Optional[List[str]], optional :param bbox: bounding box string in the form \&quot;bottomleft-x,bottomleft-y,topright-x,topright-y\&quot;, defaults to Query(None) :type bbox: Optional[str], optional :param start: filter resources with start_date &gt;&#x3D; start, start in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type start: Optional[datetime], optional :param end: filter resources with end_date &lt;&#x3D; end, end in the form &#39;YYYY-MM-DD HH:MM:SS&#39;, defaults to Query(None) :type end: Optional[datetime], optional :type request_codes: Optional[List[str]], optional :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of layers grouped by datatype id :rtype: List[Dict[str,Dict[str,object]]]
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="bbox"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="requestCodes"> (optional)</param>
        /// <param name="includeMapRequests"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Abp.Importer.Client.ApiResponse<Object>> GetLayersLayersGetWithHttpInfoAsync(List<string> datatypeIds = default(List<string>), string bbox = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), List<string> requestCodes = default(List<string>), bool? includeMapRequests = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Abp.Importer.Client.RequestOptions localVarRequestOptions = new Abp.Importer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Abp.Importer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Abp.Importer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (datatypeIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("multi", "datatype_ids", datatypeIds));
            }
            if (bbox != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "bbox", bbox));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (requestCodes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("multi", "request_codes", requestCodes));
            }
            if (includeMapRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "include_map_requests", includeMapRequests));
            }

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/layers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLayersLayersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Resources Gets stored resources following the given optional criteria.  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <param name="includeDeleted"> (optional, default to false)</param>
        /// <returns>List&lt;GeoserverResourceSchema&gt;</returns>
        public List<GeoserverResourceSchema> GetResourcesResourcesGet(List<string> datatypeIds = default(List<string>), string resourceId = default(string), bool? includeDeleted = default(bool?))
        {
            Abp.Importer.Client.ApiResponse<List<GeoserverResourceSchema>> localVarResponse = GetResourcesResourcesGetWithHttpInfo(datatypeIds, resourceId, includeDeleted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Resources Gets stored resources following the given optional criteria.  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <param name="includeDeleted"> (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;GeoserverResourceSchema&gt;</returns>
        public Abp.Importer.Client.ApiResponse<List<GeoserverResourceSchema>> GetResourcesResourcesGetWithHttpInfo(List<string> datatypeIds = default(List<string>), string resourceId = default(string), bool? includeDeleted = default(bool?))
        {
            Abp.Importer.Client.RequestOptions localVarRequestOptions = new Abp.Importer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Abp.Importer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Abp.Importer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (datatypeIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("multi", "datatype_ids", datatypeIds));
            }
            if (resourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "resource_id", resourceId));
            }
            if (includeDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "include_deleted", includeDeleted));
            }

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GeoserverResourceSchema>>("/resources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcesResourcesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Resources Gets stored resources following the given optional criteria.  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <param name="includeDeleted"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GeoserverResourceSchema&gt;</returns>
        public async System.Threading.Tasks.Task<List<GeoserverResourceSchema>> GetResourcesResourcesGetAsync(List<string> datatypeIds = default(List<string>), string resourceId = default(string), bool? includeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Abp.Importer.Client.ApiResponse<List<GeoserverResourceSchema>> localVarResponse = await GetResourcesResourcesGetWithHttpInfoAsync(datatypeIds, resourceId, includeDeleted, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Resources Gets stored resources following the given optional criteria.  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional :return: list of resource models to be serialized :rtype: List[GeoserverResourceSchema]
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeIds"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <param name="includeDeleted"> (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GeoserverResourceSchema&gt;)</returns>
        public async System.Threading.Tasks.Task<Abp.Importer.Client.ApiResponse<List<GeoserverResourceSchema>>> GetResourcesResourcesGetWithHttpInfoAsync(List<string> datatypeIds = default(List<string>), string resourceId = default(string), bool? includeDeleted = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Abp.Importer.Client.RequestOptions localVarRequestOptions = new Abp.Importer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Abp.Importer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Abp.Importer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (datatypeIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("multi", "datatype_ids", datatypeIds));
            }
            if (resourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "resource_id", resourceId));
            }
            if (includeDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "include_deleted", includeDeleted));
            }

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GeoserverResourceSchema>>("/resources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcesResourcesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Timeseries Retrieves the time series of the requested attribute for layers denoted by the specified datatype_id, at the \&quot;point\&quot; position  :param datatype_id: datatype_id of the layers to retrieve the attribute time series from :type datatype_id: str  :param request_code: request code of the layers to retrieve the attribute time series from :type request_code: str  :param point: point string in the WKT form PONIT(x y) :type point: str  :param start: start date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with start_date &gt;&#x3D; start, defaults to Query(None) :type start: Optional[datetime], optional  :param end: end date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with end_date &lt;&#x3D; end, defaults to Query(None) :type end: Optional[datetime], optional  :param crs: coordinate reference system. For example: &#39;EPSG:4326&#39; :type crs: str  :param attribute: name of the column containing the requested attribute :type attribute: Optional[str]  :param geom_col: name of the db table column containing the geometry :type geom_col: Optional[str]  :param date_start_col: name of the db table column containing the activation start date :type date_start_col: Optional[str]  :param date_end_col: name of the db table column containing the activation end date :type date_end_col: Optional[str]  :param creation_date_col: name of the column to use when choosing between multiple table rows with the same start_date.                           Pick always the row with the most recent creation_date_col :type creation_date_col: Optional[str]  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional  :return: time series of the attribute values at \&quot;point\&quot; location :rtype: json  Example: I have many GeoJSON files that form a time series saved on the PostGIS db, each containing polygons with certain values over a specified area. I want to get the series of the \&quot;temperature\&quot; value of the point 15.18,41.68 from date 2020-02-04 00:00:00 to date 2020-02-11 23:59:59. Supposing that the GeoJSON files have their geometries saved in the \&quot;geometry\&quot; column, their start reference date saved in the \&quot;date_start\&quot; column and their end reference date in the \&quot;date_end\&quot; column, specifying all these parameters returns me a dataframe with all the values of the \&quot;temperature\&quot; variable contained in the GeoJSON files for the requested time period, at the specified point location. The \&quot;creation_date_col\&quot; is used when multiple files span the same time (to be more precise, have the same \&quot;date_start\&quot;), only the most recent is returned.
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeId"></param>
        /// <param name="point"></param>
        /// <param name="crs"></param>
        /// <param name="requestCode"> (optional)</param>
        /// <param name="layerName"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="attribute"> (optional)</param>
        /// <param name="geomCol"> (optional, default to &quot;geometry&quot;)</param>
        /// <param name="dateStartCol"> (optional, default to &quot;date_start&quot;)</param>
        /// <param name="dateEndCol"> (optional, default to &quot;date_end&quot;)</param>
        /// <param name="creationDateCol"> (optional, default to &quot;computation_time&quot;)</param>
        /// <returns>Object</returns>
        public Object GetTimeseriesTimeseriesGet(string datatypeId, string point, string crs, string requestCode = default(string), string layerName = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string attribute = default(string), string geomCol = default(string), string dateStartCol = default(string), string dateEndCol = default(string), string creationDateCol = default(string))
        {
            Abp.Importer.Client.ApiResponse<Object> localVarResponse = GetTimeseriesTimeseriesGetWithHttpInfo(datatypeId, point, crs, requestCode, layerName, start, end, attribute, geomCol, dateStartCol, dateEndCol, creationDateCol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Timeseries Retrieves the time series of the requested attribute for layers denoted by the specified datatype_id, at the \&quot;point\&quot; position  :param datatype_id: datatype_id of the layers to retrieve the attribute time series from :type datatype_id: str  :param request_code: request code of the layers to retrieve the attribute time series from :type request_code: str  :param point: point string in the WKT form PONIT(x y) :type point: str  :param start: start date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with start_date &gt;&#x3D; start, defaults to Query(None) :type start: Optional[datetime], optional  :param end: end date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with end_date &lt;&#x3D; end, defaults to Query(None) :type end: Optional[datetime], optional  :param crs: coordinate reference system. For example: &#39;EPSG:4326&#39; :type crs: str  :param attribute: name of the column containing the requested attribute :type attribute: Optional[str]  :param geom_col: name of the db table column containing the geometry :type geom_col: Optional[str]  :param date_start_col: name of the db table column containing the activation start date :type date_start_col: Optional[str]  :param date_end_col: name of the db table column containing the activation end date :type date_end_col: Optional[str]  :param creation_date_col: name of the column to use when choosing between multiple table rows with the same start_date.                           Pick always the row with the most recent creation_date_col :type creation_date_col: Optional[str]  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional  :return: time series of the attribute values at \&quot;point\&quot; location :rtype: json  Example: I have many GeoJSON files that form a time series saved on the PostGIS db, each containing polygons with certain values over a specified area. I want to get the series of the \&quot;temperature\&quot; value of the point 15.18,41.68 from date 2020-02-04 00:00:00 to date 2020-02-11 23:59:59. Supposing that the GeoJSON files have their geometries saved in the \&quot;geometry\&quot; column, their start reference date saved in the \&quot;date_start\&quot; column and their end reference date in the \&quot;date_end\&quot; column, specifying all these parameters returns me a dataframe with all the values of the \&quot;temperature\&quot; variable contained in the GeoJSON files for the requested time period, at the specified point location. The \&quot;creation_date_col\&quot; is used when multiple files span the same time (to be more precise, have the same \&quot;date_start\&quot;), only the most recent is returned.
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeId"></param>
        /// <param name="point"></param>
        /// <param name="crs"></param>
        /// <param name="requestCode"> (optional)</param>
        /// <param name="layerName"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="attribute"> (optional)</param>
        /// <param name="geomCol"> (optional, default to &quot;geometry&quot;)</param>
        /// <param name="dateStartCol"> (optional, default to &quot;date_start&quot;)</param>
        /// <param name="dateEndCol"> (optional, default to &quot;date_end&quot;)</param>
        /// <param name="creationDateCol"> (optional, default to &quot;computation_time&quot;)</param>
        /// <returns>ApiResponse of Object</returns>
        public Abp.Importer.Client.ApiResponse<Object> GetTimeseriesTimeseriesGetWithHttpInfo(string datatypeId, string point, string crs, string requestCode = default(string), string layerName = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string attribute = default(string), string geomCol = default(string), string dateStartCol = default(string), string dateEndCol = default(string), string creationDateCol = default(string))
        {
            // verify the required parameter 'datatypeId' is set
            if (datatypeId == null)
            {
                throw new Abp.Importer.Client.ApiException(400, "Missing required parameter 'datatypeId' when calling DashboardApi->GetTimeseriesTimeseriesGet");
            }

            // verify the required parameter 'point' is set
            if (point == null)
            {
                throw new Abp.Importer.Client.ApiException(400, "Missing required parameter 'point' when calling DashboardApi->GetTimeseriesTimeseriesGet");
            }

            // verify the required parameter 'crs' is set
            if (crs == null)
            {
                throw new Abp.Importer.Client.ApiException(400, "Missing required parameter 'crs' when calling DashboardApi->GetTimeseriesTimeseriesGet");
            }

            Abp.Importer.Client.RequestOptions localVarRequestOptions = new Abp.Importer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Abp.Importer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Abp.Importer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "datatype_id", datatypeId));
            if (requestCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "request_code", requestCode));
            }
            if (layerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "layer_name", layerName));
            }
            localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "point", point));
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "crs", crs));
            if (attribute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "attribute", attribute));
            }
            if (geomCol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "geom_col", geomCol));
            }
            if (dateStartCol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "date_start_col", dateStartCol));
            }
            if (dateEndCol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "date_end_col", dateEndCol));
            }
            if (creationDateCol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "creation_date_col", creationDateCol));
            }

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/timeseries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimeseriesTimeseriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Timeseries Retrieves the time series of the requested attribute for layers denoted by the specified datatype_id, at the \&quot;point\&quot; position  :param datatype_id: datatype_id of the layers to retrieve the attribute time series from :type datatype_id: str  :param request_code: request code of the layers to retrieve the attribute time series from :type request_code: str  :param point: point string in the WKT form PONIT(x y) :type point: str  :param start: start date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with start_date &gt;&#x3D; start, defaults to Query(None) :type start: Optional[datetime], optional  :param end: end date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with end_date &lt;&#x3D; end, defaults to Query(None) :type end: Optional[datetime], optional  :param crs: coordinate reference system. For example: &#39;EPSG:4326&#39; :type crs: str  :param attribute: name of the column containing the requested attribute :type attribute: Optional[str]  :param geom_col: name of the db table column containing the geometry :type geom_col: Optional[str]  :param date_start_col: name of the db table column containing the activation start date :type date_start_col: Optional[str]  :param date_end_col: name of the db table column containing the activation end date :type date_end_col: Optional[str]  :param creation_date_col: name of the column to use when choosing between multiple table rows with the same start_date.                           Pick always the row with the most recent creation_date_col :type creation_date_col: Optional[str]  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional  :return: time series of the attribute values at \&quot;point\&quot; location :rtype: json  Example: I have many GeoJSON files that form a time series saved on the PostGIS db, each containing polygons with certain values over a specified area. I want to get the series of the \&quot;temperature\&quot; value of the point 15.18,41.68 from date 2020-02-04 00:00:00 to date 2020-02-11 23:59:59. Supposing that the GeoJSON files have their geometries saved in the \&quot;geometry\&quot; column, their start reference date saved in the \&quot;date_start\&quot; column and their end reference date in the \&quot;date_end\&quot; column, specifying all these parameters returns me a dataframe with all the values of the \&quot;temperature\&quot; variable contained in the GeoJSON files for the requested time period, at the specified point location. The \&quot;creation_date_col\&quot; is used when multiple files span the same time (to be more precise, have the same \&quot;date_start\&quot;), only the most recent is returned.
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeId"></param>
        /// <param name="point"></param>
        /// <param name="crs"></param>
        /// <param name="requestCode"> (optional)</param>
        /// <param name="layerName"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="attribute"> (optional)</param>
        /// <param name="geomCol"> (optional, default to &quot;geometry&quot;)</param>
        /// <param name="dateStartCol"> (optional, default to &quot;date_start&quot;)</param>
        /// <param name="dateEndCol"> (optional, default to &quot;date_end&quot;)</param>
        /// <param name="creationDateCol"> (optional, default to &quot;computation_time&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetTimeseriesTimeseriesGetAsync(string datatypeId, string point, string crs, string requestCode = default(string), string layerName = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string attribute = default(string), string geomCol = default(string), string dateStartCol = default(string), string dateEndCol = default(string), string creationDateCol = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Abp.Importer.Client.ApiResponse<Object> localVarResponse = await GetTimeseriesTimeseriesGetWithHttpInfoAsync(datatypeId, point, crs, requestCode, layerName, start, end, attribute, geomCol, dateStartCol, dateEndCol, creationDateCol, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Timeseries Retrieves the time series of the requested attribute for layers denoted by the specified datatype_id, at the \&quot;point\&quot; position  :param datatype_id: datatype_id of the layers to retrieve the attribute time series from :type datatype_id: str  :param request_code: request code of the layers to retrieve the attribute time series from :type request_code: str  :param point: point string in the WKT form PONIT(x y) :type point: str  :param start: start date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with start_date &gt;&#x3D; start, defaults to Query(None) :type start: Optional[datetime], optional  :param end: end date in the form &#39;YYYY-MM-DD HH:MM:SS&#39; filter resources with end_date &lt;&#x3D; end, defaults to Query(None) :type end: Optional[datetime], optional  :param crs: coordinate reference system. For example: &#39;EPSG:4326&#39; :type crs: str  :param attribute: name of the column containing the requested attribute :type attribute: Optional[str]  :param geom_col: name of the db table column containing the geometry :type geom_col: Optional[str]  :param date_start_col: name of the db table column containing the activation start date :type date_start_col: Optional[str]  :param date_end_col: name of the db table column containing the activation end date :type date_end_col: Optional[str]  :param creation_date_col: name of the column to use when choosing between multiple table rows with the same start_date.                           Pick always the row with the most recent creation_date_col :type creation_date_col: Optional[str]  :param db: DB session instance, defaults to Depends(db_webserver) :type db: Session, optional  :return: time series of the attribute values at \&quot;point\&quot; location :rtype: json  Example: I have many GeoJSON files that form a time series saved on the PostGIS db, each containing polygons with certain values over a specified area. I want to get the series of the \&quot;temperature\&quot; value of the point 15.18,41.68 from date 2020-02-04 00:00:00 to date 2020-02-11 23:59:59. Supposing that the GeoJSON files have their geometries saved in the \&quot;geometry\&quot; column, their start reference date saved in the \&quot;date_start\&quot; column and their end reference date in the \&quot;date_end\&quot; column, specifying all these parameters returns me a dataframe with all the values of the \&quot;temperature\&quot; variable contained in the GeoJSON files for the requested time period, at the specified point location. The \&quot;creation_date_col\&quot; is used when multiple files span the same time (to be more precise, have the same \&quot;date_start\&quot;), only the most recent is returned.
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="datatypeId"></param>
        /// <param name="point"></param>
        /// <param name="crs"></param>
        /// <param name="requestCode"> (optional)</param>
        /// <param name="layerName"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <param name="end"> (optional)</param>
        /// <param name="attribute"> (optional)</param>
        /// <param name="geomCol"> (optional, default to &quot;geometry&quot;)</param>
        /// <param name="dateStartCol"> (optional, default to &quot;date_start&quot;)</param>
        /// <param name="dateEndCol"> (optional, default to &quot;date_end&quot;)</param>
        /// <param name="creationDateCol"> (optional, default to &quot;computation_time&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Abp.Importer.Client.ApiResponse<Object>> GetTimeseriesTimeseriesGetWithHttpInfoAsync(string datatypeId, string point, string crs, string requestCode = default(string), string layerName = default(string), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string attribute = default(string), string geomCol = default(string), string dateStartCol = default(string), string dateEndCol = default(string), string creationDateCol = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'datatypeId' is set
            if (datatypeId == null)
            {
                throw new Abp.Importer.Client.ApiException(400, "Missing required parameter 'datatypeId' when calling DashboardApi->GetTimeseriesTimeseriesGet");
            }

            // verify the required parameter 'point' is set
            if (point == null)
            {
                throw new Abp.Importer.Client.ApiException(400, "Missing required parameter 'point' when calling DashboardApi->GetTimeseriesTimeseriesGet");
            }

            // verify the required parameter 'crs' is set
            if (crs == null)
            {
                throw new Abp.Importer.Client.ApiException(400, "Missing required parameter 'crs' when calling DashboardApi->GetTimeseriesTimeseriesGet");
            }


            Abp.Importer.Client.RequestOptions localVarRequestOptions = new Abp.Importer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Abp.Importer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Abp.Importer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "datatype_id", datatypeId));
            if (requestCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "request_code", requestCode));
            }
            if (layerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "layer_name", layerName));
            }
            localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "point", point));
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "crs", crs));
            if (attribute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "attribute", attribute));
            }
            if (geomCol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "geom_col", geomCol));
            }
            if (dateStartCol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "date_start_col", dateStartCol));
            }
            if (dateEndCol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "date_end_col", dateEndCol));
            }
            if (creationDateCol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "creation_date_col", creationDateCol));
            }

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/timeseries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTimeseriesTimeseriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
