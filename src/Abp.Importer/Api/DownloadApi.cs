/*
 * Importer & Mapper API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Abp.Importer.Client;
using Abp.Importer.Model;

namespace Abp.Importer.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDownloadApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download Resource
        /// </summary>
        /// <remarks>
        /// Gets the resource file given the temporal path returned by API GET resource_path.  :param filepath: filepath of the resource. This is just a temporary path :type metadata_id: str  :return: Resource binary file :rtype: application/octet-stream
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <returns></returns>
        void DownloadResourceDownloadGet(string filename);

        /// <summary>
        /// Download Resource
        /// </summary>
        /// <remarks>
        /// Gets the resource file given the temporal path returned by API GET resource_path.  :param filepath: filepath of the resource. This is just a temporary path :type metadata_id: str  :return: Resource binary file :rtype: application/octet-stream
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadResourceDownloadGetWithHttpInfo(string filename);
        /// <summary>
        /// Get Resource Path
        /// </summary>
        /// <remarks>
        /// Return the temporary filename containing the resource   :param layer_name: name of the layer. It is returned by the API /layers :type layer_name: str  :param resource_id: resource_id of the layer. It is returned by the API /layers :type resource_id: str  :return: temporary filepath :rtype: text/json
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerName"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <returns>Object</returns>
        Object GetResourcePathResourcePathGet(string layerName = default(string), string resourceId = default(string));

        /// <summary>
        /// Get Resource Path
        /// </summary>
        /// <remarks>
        /// Return the temporary filename containing the resource   :param layer_name: name of the layer. It is returned by the API /layers :type layer_name: str  :param resource_id: resource_id of the layer. It is returned by the API /layers :type resource_id: str  :return: temporary filepath :rtype: text/json
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerName"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetResourcePathResourcePathGetWithHttpInfo(string layerName = default(string), string resourceId = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDownloadApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Download Resource
        /// </summary>
        /// <remarks>
        /// Gets the resource file given the temporal path returned by API GET resource_path.  :param filepath: filepath of the resource. This is just a temporary path :type metadata_id: str  :return: Resource binary file :rtype: application/octet-stream
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadResourceDownloadGetAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download Resource
        /// </summary>
        /// <remarks>
        /// Gets the resource file given the temporal path returned by API GET resource_path.  :param filepath: filepath of the resource. This is just a temporary path :type metadata_id: str  :return: Resource binary file :rtype: application/octet-stream
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadResourceDownloadGetWithHttpInfoAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Resource Path
        /// </summary>
        /// <remarks>
        /// Return the temporary filename containing the resource   :param layer_name: name of the layer. It is returned by the API /layers :type layer_name: str  :param resource_id: resource_id of the layer. It is returned by the API /layers :type resource_id: str  :return: temporary filepath :rtype: text/json
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerName"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetResourcePathResourcePathGetAsync(string layerName = default(string), string resourceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Resource Path
        /// </summary>
        /// <remarks>
        /// Return the temporary filename containing the resource   :param layer_name: name of the layer. It is returned by the API /layers :type layer_name: str  :param resource_id: resource_id of the layer. It is returned by the API /layers :type resource_id: str  :return: temporary filepath :rtype: text/json
        /// </remarks>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerName"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetResourcePathResourcePathGetWithHttpInfoAsync(string layerName = default(string), string resourceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDownloadApi : IDownloadApiSync, IDownloadApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DownloadApi : IDownloadApi
    {
        private Abp.Importer.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DownloadApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DownloadApi(string basePath)
        {
            this.Configuration = Abp.Importer.Client.Configuration.MergeConfigurations(
                Abp.Importer.Client.GlobalConfiguration.Instance,
                new Abp.Importer.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Abp.Importer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Abp.Importer.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Abp.Importer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DownloadApi(Abp.Importer.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Abp.Importer.Client.Configuration.MergeConfigurations(
                Abp.Importer.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Abp.Importer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Abp.Importer.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Abp.Importer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DownloadApi(Abp.Importer.Client.ISynchronousClient client, Abp.Importer.Client.IAsynchronousClient asyncClient, Abp.Importer.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Abp.Importer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Abp.Importer.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Abp.Importer.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Abp.Importer.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Abp.Importer.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Download Resource Gets the resource file given the temporal path returned by API GET resource_path.  :param filepath: filepath of the resource. This is just a temporary path :type metadata_id: str  :return: Resource binary file :rtype: application/octet-stream
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <returns></returns>
        public void DownloadResourceDownloadGet(string filename)
        {
            DownloadResourceDownloadGetWithHttpInfo(filename);
        }

        /// <summary>
        /// Download Resource Gets the resource file given the temporal path returned by API GET resource_path.  :param filepath: filepath of the resource. This is just a temporary path :type metadata_id: str  :return: Resource binary file :rtype: application/octet-stream
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Abp.Importer.Client.ApiResponse<Object> DownloadResourceDownloadGetWithHttpInfo(string filename)
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new Abp.Importer.Client.ApiException(400, "Missing required parameter 'filename' when calling DownloadApi->DownloadResourceDownloadGet");
            }

            Abp.Importer.Client.RequestOptions localVarRequestOptions = new Abp.Importer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Abp.Importer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Abp.Importer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadResourceDownloadGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download Resource Gets the resource file given the temporal path returned by API GET resource_path.  :param filepath: filepath of the resource. This is just a temporary path :type metadata_id: str  :return: Resource binary file :rtype: application/octet-stream
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadResourceDownloadGetAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DownloadResourceDownloadGetWithHttpInfoAsync(filename, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Download Resource Gets the resource file given the temporal path returned by API GET resource_path.  :param filepath: filepath of the resource. This is just a temporary path :type metadata_id: str  :return: Resource binary file :rtype: application/octet-stream
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filename"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Abp.Importer.Client.ApiResponse<Object>> DownloadResourceDownloadGetWithHttpInfoAsync(string filename, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'filename' is set
            if (filename == null)
            {
                throw new Abp.Importer.Client.ApiException(400, "Missing required parameter 'filename' when calling DownloadApi->DownloadResourceDownloadGet");
            }


            Abp.Importer.Client.RequestOptions localVarRequestOptions = new Abp.Importer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Abp.Importer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Abp.Importer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "filename", filename));


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadResourceDownloadGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Resource Path Return the temporary filename containing the resource   :param layer_name: name of the layer. It is returned by the API /layers :type layer_name: str  :param resource_id: resource_id of the layer. It is returned by the API /layers :type resource_id: str  :return: temporary filepath :rtype: text/json
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerName"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <returns>Object</returns>
        public Object GetResourcePathResourcePathGet(string layerName = default(string), string resourceId = default(string))
        {
            Abp.Importer.Client.ApiResponse<Object> localVarResponse = GetResourcePathResourcePathGetWithHttpInfo(layerName, resourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Resource Path Return the temporary filename containing the resource   :param layer_name: name of the layer. It is returned by the API /layers :type layer_name: str  :param resource_id: resource_id of the layer. It is returned by the API /layers :type resource_id: str  :return: temporary filepath :rtype: text/json
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerName"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Abp.Importer.Client.ApiResponse<Object> GetResourcePathResourcePathGetWithHttpInfo(string layerName = default(string), string resourceId = default(string))
        {
            Abp.Importer.Client.RequestOptions localVarRequestOptions = new Abp.Importer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Abp.Importer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Abp.Importer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (layerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "layer_name", layerName));
            }
            if (resourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "resource_id", resourceId));
            }

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/resource_path", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePathResourcePathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Resource Path Return the temporary filename containing the resource   :param layer_name: name of the layer. It is returned by the API /layers :type layer_name: str  :param resource_id: resource_id of the layer. It is returned by the API /layers :type resource_id: str  :return: temporary filepath :rtype: text/json
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerName"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetResourcePathResourcePathGetAsync(string layerName = default(string), string resourceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Abp.Importer.Client.ApiResponse<Object> localVarResponse = await GetResourcePathResourcePathGetWithHttpInfoAsync(layerName, resourceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Resource Path Return the temporary filename containing the resource   :param layer_name: name of the layer. It is returned by the API /layers :type layer_name: str  :param resource_id: resource_id of the layer. It is returned by the API /layers :type resource_id: str  :return: temporary filepath :rtype: text/json
        /// </summary>
        /// <exception cref="Abp.Importer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="layerName"> (optional)</param>
        /// <param name="resourceId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Abp.Importer.Client.ApiResponse<Object>> GetResourcePathResourcePathGetWithHttpInfoAsync(string layerName = default(string), string resourceId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Abp.Importer.Client.RequestOptions localVarRequestOptions = new Abp.Importer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Abp.Importer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Abp.Importer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (layerName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "layer_name", layerName));
            }
            if (resourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Abp.Importer.Client.ClientUtils.ParameterToMultiMap("", "resource_id", resourceId));
            }

            // authentication (APIKeyHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Key", this.Configuration.GetApiKeyWithPrefix("X-API-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/resource_path", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResourcePathResourcePathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
